{"version":3,"sources":["themes/theme.ts","containers/MyApp.tsx","index.tsx"],"names":["lightTheme","createMuiTheme","props","MuiAppBar","position","MuiCard","elevation","overrides","root","background","palette","default","darkTheme","type","grey","paper","MuiTable","MuiTypography","color","languages","MyApp","darkMode","useDarkMode","useState","setIsEditorReady","defaultValue","value","setValue","results","setResults","React","languageAnchorEl","setLanguageAnchorEl","selectedLanguage","setSelectedLanguage","useEffect","th","monaco","setTheme","t","useTranslation","theme","handleEditorDidMount","_","editor","a","modelUri","parse","model","createModel","setModel","fetch","then","data","json","schema","addDiagnostics","toString","result","JSON","tr","Transpiler","to","e","console","error","handleTranspile","AppBar","Toolbar","Grid","container","alignContent","alignItems","justify","Typography","variant","style","paddingRight","Tooltip","title","Button","marginRight","onClick","event","currentTarget","endIcon","Menu","id","anchorEl","keepMounted","open","Boolean","onClose","Object","values","map","language","i","MenuItem","IconButton","window","toggle","CssBaseline","split","minSize","maxSize","defaultSize","flexGrow","height","onChange","ev","v","editorDidMount","options","minimap","enabled","wordWrap","lineNumbers","wrappingIndent","readOnly","showFoldingControls","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9382587.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import React, { useState, useEffect } from \"react\";\nimport { MuiThemeProvider, AppBar, Toolbar, Typography, IconButton, Tooltip, CssBaseline, Grid, Menu, Button, MenuItem } from \"@material-ui/core\"; //tslint:disable-line\nimport useDarkMode from \"use-dark-mode\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport * as monaco from \"monaco-editor\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport { lightTheme, darkTheme } from \"../themes/theme\";\nimport { useTranslation } from \"react-i18next\";\nimport SplitPane from \"react-split-pane\";\nimport Transpiler, { SupportedLanguages } from \"@json-schema-tools/transpiler\";\nimport \"./MyApp.css\";\nimport Editor from \"@etclabscore/react-monaco-editor\";\nimport { addDiagnostics } from \"@etclabscore/monaco-add-json-schema-diagnostics\";\n\nconst languages: SupportedLanguages[] = [\"typescript\", \"golang\", \"python\", \"rust\"];\n\nconst MyApp: React.FC = () => {\n  const darkMode = useDarkMode();\n  const [, setIsEditorReady] = useState(false);\n  const [defaultValue] = useState(`{\\n  \"title\": \"foo\",\\n  \"type\": \"string\"\\n}`);\n  const [value, setValue] = useState(defaultValue);\n  const [results, setResults] = useState(\"\");\n  const [languageAnchorEl, setLanguageAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [selectedLanguage, setSelectedLanguage]: [SupportedLanguages, any] = useState(\"typescript\");\n\n  useEffect(() => {\n    const th = darkMode.value ? \"vs-dark\" : \"vs\";\n    monaco.editor.setTheme(th);\n  }, [darkMode.value]);\n\n  function handleTranspile() {\n    try {\n      const result = JSON.parse(value);\n      const tr = new Transpiler(result);\n      setResults(tr.to(selectedLanguage));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  const { t } = useTranslation();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n\n  const handleLanguageClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setLanguageAnchorEl(event.currentTarget);\n  };\n  const handleLanguageClose = () => {\n    setLanguageAnchorEl(null);\n  };\n  const handleLanguageChange = (lang: string) => {\n    setSelectedLanguage(lang);\n    setLanguageAnchorEl(null);\n  };\n\n  const handleEditorDidMount = async (_: any, editor: any) => {\n    setIsEditorReady(true);\n    const modelUriString = \"inmemory://json-schema-tools-playground.json\";\n    const modelUri = monaco.Uri.parse(modelUriString);\n    const model = monaco.editor.createModel(value || \"\", \"json\", modelUri);\n    editor.setModel(model);\n    const schema = await fetch(\"https://json-schema.org/draft-07/schema\").then((data) => data.json());\n    addDiagnostics(modelUri.toString(), schema, monaco);\n  };\n\n  const handleReadOnlyEditorDidMount = (editor: any) => {\n    // noop\n  };\n\n  useEffect(() => {\n    handleTranspile();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value, selectedLanguage]);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AppBar position=\"static\" color=\"default\" elevation={0}>\n        <Toolbar>\n          <Grid container alignContent=\"center\" alignItems=\"center\" justify=\"flex-start\">\n            <Typography variant=\"h6\" style={{ paddingRight: \"20px\" }}>{t(\"json-schema.tools\")}</Typography>\n            <Typography variant=\"caption\" style={{ paddingRight: \"5px\" }}>\n              {t(\"playground\")}\n            </Typography>\n          </Grid>\n          <Grid container alignContent=\"center\" alignItems=\"center\" justify=\"flex-end\">\n            {<>\n              <Tooltip title={\"Language\"} >\n                <>\n                  <Typography variant=\"body1\" style={{ paddingRight: \"10px\" }}>Language:</Typography>\n                  <Button\n                    style={{ marginRight: \"10px\" }}\n                    onClick={handleLanguageClick} variant=\"outlined\" endIcon={\n                      <ArrowDropDownIcon />\n                    }>{selectedLanguage}</Button>\n                </>\n              </Tooltip>\n              <Menu\n                id=\"input-menu\"\n                anchorEl={languageAnchorEl}\n                keepMounted\n                open={Boolean(languageAnchorEl)}\n                onClose={handleLanguageClose}\n              >\n                {Object.values(languages).map((language, i) => (\n                  <MenuItem onClick={(event) => handleLanguageChange(language)}>{language}</MenuItem>\n                ))}\n              </Menu>\n            </>\n            }\n            <Tooltip title={t(\"json-schema.tools Github\")}>\n              <IconButton\n                onClick={() =>\n                  window.open(\"https://github.com/json-schema-tools/playground\")\n                }>\n                <CodeIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title={t(\"Toggle Dark Mode\")}>\n              <IconButton onClick={darkMode.toggle}>\n                {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n              </IconButton>\n            </Tooltip>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <CssBaseline />\n      <SplitPane split=\"vertical\" minSize={100} maxSize={-100} defaultSize={\"35%\"} style={{ flexGrow: 1 }}>\n        <Editor\n          height=\"90vh\"\n          value={defaultValue}\n          onChange={(ev: any, v: string) => {\n            setValue(v);\n          }}\n          editorDidMount={handleEditorDidMount}\n          language=\"json\"\n        />\n        <Editor\n          height=\"90vh\"\n          editorDidMount={handleReadOnlyEditorDidMount}\n          options={{\n            minimap: {\n              enabled: false,\n            },\n            wordWrap: \"on\",\n            lineNumbers: \"off\",\n            wrappingIndent: \"deepIndent\",\n            readOnly: true,\n            showFoldingControls: \"always\",\n          }}\n          value={results}\n          language={selectedLanguage}\n        />\n        <div>\n        </div>\n      </SplitPane>\n    </MuiThemeProvider>\n  );\n};\n\nexport default MyApp;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport MyApp from \"./containers/MyApp\";\n\nReactDOM.render(<MyApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}